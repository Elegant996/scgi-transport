name: Dependabot auto-approve
on: pull_request

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    name: Build and test image
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'

    strategy:
      fail-fast: true
      matrix:
        arch: ["amd64"]
        include:
          - arch: amd64
            os: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export to Docker
        uses: docker/build-push-action@v6
        continue-on-error: true
        id: buildx1
        with:
          context: .
          platforms: linux/${{ matrix.arch }}
          load: true
          tags: stable-test

      # Temp workaround for failed builds
      - name: Wait to retry
        if: steps.buildx1.outcome != 'success'
        run: |
          sleep 60

      # Temp workaround for failed builds
      - name: Build and export to Docker
        uses: docker/build-push-action@v6
        if: steps.buildx1.outcome != 'success'
        with:
          context: .
          platforms: linux/${{ matrix.arch }}
          load: true
          tags: stable-test

      # - name: Test
      #   run: |
      #     docker run --rm stable-test caddy stop

      - name: Build and export
        uses: docker/build-push-action@v6
        with:
          tags: scgi-transport:latest
          outputs: type=docker,dest=${{ github.event.repository.name }}.tar
  
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}
          path: ${{ github.event.repository.name }}.tar

  renovate:
    needs: [build]
    name: 'Dependabot updates'
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'

    steps:
      - name: Approve a PR
        run: gh pr review --approve "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ github.token }}

      - name: Auto-merge docker PRs
        run: |
          gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ github.token }}

  update-docs:
    name: 'Update the docs and tag the commit'
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'

    outputs:
      tag: ${{ steps.semvers.outputs.v_patch }}
      version: ${{ steps.semvers.outputs.patch }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: 'main'

      - name: Get latest tag
        id: latest
        run: |
          tag=$(curl -sL --request GET \
            --url "${{ github.api_url }}/repos/${{ github.repository }}/releases" \
            --header "Accept: application/vnd.github+json" \
            --header "Authorization: token ${{ github.token }}" \
            | jq -r 'first | .tag_name')

          echo "tag=${tag}" >> $GITHUB_OUTPUT
          echo "version=${tag//v}" >> $GITHUB_OUTPUT
      
      - name: Generate next semantic version
        id: semvers
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.latest.outputs.tag }}

      - name: Commit, push and tag
        uses: EndBug/add-and-commit@v9
        with:
          committer_name: GitHub Actions
          committer_email: actions@github.com
          message: 'Updating package versions'
          tag: ${{ steps.semvers.outputs.v_patch }}

  publish-release:
    needs: [build,update-docs]
    name: 'Publish the release'
    runs-on: ubuntu-latest

    steps:
      - name: Publish release
        uses: ncipollo/release-action@v1.16.0
        with:
          tag: ${{ needs.update-docs.outputs.tag }}
          token: ${{ secrets.WF_PAT }}

  push-image:
    needs: [build,update-docs]
    name: 'Push image to GHCR'
    runs-on: ubuntu-latest

    permissions:
      packages: write

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          pattern: "!*.dockerbuild"
          name: ${{ github.event.repository.name }}
          path: ${{ github.event.repository.name }}.tar

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Sanitize repo slug
        uses: actions/github-script@v7
        id: repo-slug
        with:
          result-encoding: string
          script: return '${{ github.repository }}'.toLowerCase()

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ steps.repo-slug.outputs.result }}
          tags: |
            type=semver,pattern={{version}},priority=950,value=${{ needs.update-docs.outputs.tag }}
            type=semver,pattern={{version}},value=${{ needs.update-docs.outputs.tag }},suffix=suffix=-caddy-${{ needs.metadata.outputs.new-version }}

      - name: Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=${{ github.event.repository.name }}.tar